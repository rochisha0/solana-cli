{"ast":null,"code":"import { PublicKey } from '@solana/web3.js';\nimport { getArrayCodec, getBytesCodec, getStringCodec, getStructCodec, getTupleCodec } from '@solana/codecs';\nexport const TOKEN_METADATA_DISCRIMINATOR = Buffer.from([112, 132, 90, 90, 11, 88, 157, 87]);\nconst tokenMetadataCodec = getStructCodec([['updateAuthority', getBytesCodec({\n  size: 32\n})], ['mint', getBytesCodec({\n  size: 32\n})], ['name', getStringCodec()], ['symbol', getStringCodec()], ['uri', getStringCodec()], ['additionalMetadata', getArrayCodec(getTupleCodec([getStringCodec(), getStringCodec()]))]]);\n// Checks if all elements in the array are 0\nfunction isNonePubkey(buffer) {\n  for (let i = 0; i < buffer.length; i++) {\n    if (buffer[i] !== 0) {\n      return false;\n    }\n  }\n  return true;\n}\n// Pack TokenMetadata into byte slab\nexport function pack(meta) {\n  // If no updateAuthority given, set it to the None/Zero PublicKey for encoding\n  const updateAuthority = meta.updateAuthority ?? PublicKey.default;\n  return tokenMetadataCodec.encode({\n    ...meta,\n    updateAuthority: updateAuthority.toBuffer(),\n    mint: meta.mint.toBuffer()\n  });\n}\n// unpack byte slab into TokenMetadata\nexport function unpack(buffer) {\n  const data = tokenMetadataCodec.decode(buffer);\n  return isNonePubkey(data.updateAuthority) ? {\n    mint: new PublicKey(data.mint),\n    name: data.name,\n    symbol: data.symbol,\n    uri: data.uri,\n    additionalMetadata: data.additionalMetadata\n  } : {\n    updateAuthority: new PublicKey(data.updateAuthority),\n    mint: new PublicKey(data.mint),\n    name: data.name,\n    symbol: data.symbol,\n    uri: data.uri,\n    additionalMetadata: data.additionalMetadata\n  };\n}","map":{"version":3,"names":["PublicKey","getArrayCodec","getBytesCodec","getStringCodec","getStructCodec","getTupleCodec","TOKEN_METADATA_DISCRIMINATOR","Buffer","from","tokenMetadataCodec","size","isNonePubkey","buffer","i","length","pack","meta","updateAuthority","default","encode","toBuffer","mint","unpack","data","decode","name","symbol","uri","additionalMetadata"],"sources":["/home/rochisha/solana-pay/node_modules/@solana/spl-token-metadata/src/state.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { getArrayCodec, getBytesCodec, getStringCodec, getStructCodec, getTupleCodec } from '@solana/codecs';\n\nexport const TOKEN_METADATA_DISCRIMINATOR = Buffer.from([112, 132, 90, 90, 11, 88, 157, 87]);\n\nconst tokenMetadataCodec = getStructCodec([\n    ['updateAuthority', getBytesCodec({ size: 32 })],\n    ['mint', getBytesCodec({ size: 32 })],\n    ['name', getStringCodec()],\n    ['symbol', getStringCodec()],\n    ['uri', getStringCodec()],\n    ['additionalMetadata', getArrayCodec(getTupleCodec([getStringCodec(), getStringCodec()]))],\n]);\n\nexport interface TokenMetadata {\n    // The authority that can sign to update the metadata\n    updateAuthority?: PublicKey;\n    // The associated mint, used to counter spoofing to be sure that metadata belongs to a particular mint\n    mint: PublicKey;\n    // The longer name of the token\n    name: string;\n    // The shortened symbol for the token\n    symbol: string;\n    // The URI pointing to richer metadata\n    uri: string;\n    // Any additional metadata about the token as key-value pairs\n    additionalMetadata: [string, string][];\n}\n\n// Checks if all elements in the array are 0\nfunction isNonePubkey(buffer: Uint8Array): boolean {\n    for (let i = 0; i < buffer.length; i++) {\n        if (buffer[i] !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Pack TokenMetadata into byte slab\nexport function pack(meta: TokenMetadata): Uint8Array {\n    // If no updateAuthority given, set it to the None/Zero PublicKey for encoding\n    const updateAuthority = meta.updateAuthority ?? PublicKey.default;\n    return tokenMetadataCodec.encode({\n        ...meta,\n        updateAuthority: updateAuthority.toBuffer(),\n        mint: meta.mint.toBuffer(),\n    });\n}\n\n// unpack byte slab into TokenMetadata\nexport function unpack(buffer: Buffer | Uint8Array): TokenMetadata {\n    const data = tokenMetadataCodec.decode(buffer);\n\n    return isNonePubkey(data.updateAuthority)\n        ? {\n              mint: new PublicKey(data.mint),\n              name: data.name,\n              symbol: data.symbol,\n              uri: data.uri,\n              additionalMetadata: data.additionalMetadata,\n          }\n        : {\n              updateAuthority: new PublicKey(data.updateAuthority),\n              mint: new PublicKey(data.mint),\n              name: data.name,\n              symbol: data.symbol,\n              uri: data.uri,\n              additionalMetadata: data.additionalMetadata,\n          };\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,aAAa,EAAEC,aAAa,EAAEC,cAAc,EAAEC,cAAc,EAAEC,aAAa,QAAQ,gBAAgB;AAE5G,OAAO,MAAMC,4BAA4B,GAAGC,MAAM,CAACC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;AAE5F,MAAMC,kBAAkB,GAAGL,cAAc,CAAC,CACtC,CAAC,iBAAiB,EAAEF,aAAa,CAAC;EAAEQ,IAAI,EAAE;AAAE,CAAE,CAAC,CAAC,EAChD,CAAC,MAAM,EAAER,aAAa,CAAC;EAAEQ,IAAI,EAAE;AAAE,CAAE,CAAC,CAAC,EACrC,CAAC,MAAM,EAAEP,cAAc,EAAE,CAAC,EAC1B,CAAC,QAAQ,EAAEA,cAAc,EAAE,CAAC,EAC5B,CAAC,KAAK,EAAEA,cAAc,EAAE,CAAC,EACzB,CAAC,oBAAoB,EAAEF,aAAa,CAACI,aAAa,CAAC,CAACF,cAAc,EAAE,EAAEA,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC,CAC7F,CAAC;AAiBF;AACA,SAASQ,YAAYA,CAACC,MAAkB;EACpC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,IAAID,MAAM,CAACC,CAAC,CAAC,KAAK,CAAC,EAAE;MACjB,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AAEA;AACA,OAAM,SAAUE,IAAIA,CAACC,IAAmB;EACpC;EACA,MAAMC,eAAe,GAAGD,IAAI,CAACC,eAAe,IAAIjB,SAAS,CAACkB,OAAO;EACjE,OAAOT,kBAAkB,CAACU,MAAM,CAAC;IAC7B,GAAGH,IAAI;IACPC,eAAe,EAAEA,eAAe,CAACG,QAAQ,EAAE;IAC3CC,IAAI,EAAEL,IAAI,CAACK,IAAI,CAACD,QAAQ;GAC3B,CAAC;AACN;AAEA;AACA,OAAM,SAAUE,MAAMA,CAACV,MAA2B;EAC9C,MAAMW,IAAI,GAAGd,kBAAkB,CAACe,MAAM,CAACZ,MAAM,CAAC;EAE9C,OAAOD,YAAY,CAACY,IAAI,CAACN,eAAe,CAAC,GACnC;IACII,IAAI,EAAE,IAAIrB,SAAS,CAACuB,IAAI,CAACF,IAAI,CAAC;IAC9BI,IAAI,EAAEF,IAAI,CAACE,IAAI;IACfC,MAAM,EAAEH,IAAI,CAACG,MAAM;IACnBC,GAAG,EAAEJ,IAAI,CAACI,GAAG;IACbC,kBAAkB,EAAEL,IAAI,CAACK;GAC5B,GACD;IACIX,eAAe,EAAE,IAAIjB,SAAS,CAACuB,IAAI,CAACN,eAAe,CAAC;IACpDI,IAAI,EAAE,IAAIrB,SAAS,CAACuB,IAAI,CAACF,IAAI,CAAC;IAC9BI,IAAI,EAAEF,IAAI,CAACE,IAAI;IACfC,MAAM,EAAEH,IAAI,CAACG,MAAM;IACnBC,GAAG,EAAEJ,IAAI,CAACI,GAAG;IACbC,kBAAkB,EAAEL,IAAI,CAACK;GAC5B;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}