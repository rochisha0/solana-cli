{"ast":null,"code":"import { SOLANA_PROTOCOL } from './constants.js';\n/**\n * Encode a Solana Pay URL.\n *\n * @param fields Fields to encode in the URL.\n */\nexport function encodeURL(fields) {\n  return 'link' in fields ? encodeTransactionRequestURL(fields) : encodeTransferRequestURL(fields);\n}\nfunction encodeTransactionRequestURL({\n  link,\n  label,\n  message\n}) {\n  // Remove trailing slashes\n  const pathname = link.search ? encodeURIComponent(String(link).replace(/\\/\\?/, '?')) : String(link).replace(/\\/$/, '');\n  const url = new URL(SOLANA_PROTOCOL + pathname);\n  if (label) {\n    url.searchParams.append('label', label);\n  }\n  if (message) {\n    url.searchParams.append('message', message);\n  }\n  return url;\n}\nfunction encodeTransferRequestURL({\n  recipient,\n  amount,\n  splToken,\n  reference,\n  label,\n  message,\n  memo\n}) {\n  const pathname = recipient.toBase58();\n  const url = new URL(SOLANA_PROTOCOL + pathname);\n  if (amount) {\n    url.searchParams.append('amount', amount.toFixed(amount.decimalPlaces() ?? 0));\n  }\n  if (splToken) {\n    url.searchParams.append('spl-token', splToken.toBase58());\n  }\n  if (reference) {\n    if (!Array.isArray(reference)) {\n      reference = [reference];\n    }\n    for (const pubkey of reference) {\n      url.searchParams.append('reference', pubkey.toBase58());\n    }\n  }\n  if (label) {\n    url.searchParams.append('label', label);\n  }\n  if (message) {\n    url.searchParams.append('message', message);\n  }\n  if (memo) {\n    url.searchParams.append('memo', memo);\n  }\n  return url;\n}","map":{"version":3,"names":["SOLANA_PROTOCOL","encodeURL","fields","encodeTransactionRequestURL","encodeTransferRequestURL","link","label","message","pathname","search","encodeURIComponent","String","replace","url","URL","searchParams","append","recipient","amount","splToken","reference","memo","toBase58","toFixed","decimalPlaces","Array","isArray","pubkey"],"sources":["/home/rochisha/solana-pay/node_modules/@solana/pay/src/encodeURL.ts"],"sourcesContent":["import { SOLANA_PROTOCOL } from './constants.js';\nimport type { Amount, Label, Memo, Message, Recipient, References, SPLToken } from './types.js';\n\n/**\n * Fields of a Solana Pay transaction request URL.\n */\nexport interface TransactionRequestURLFields {\n    /** `link` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#link). */\n    link: URL;\n    /** `label` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#label-1). */\n    label?: Label;\n    /** `message` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#message-1).  */\n    message?: Message;\n}\n\n/**\n * Fields of a Solana Pay transfer request URL.\n */\nexport interface TransferRequestURLFields {\n    /** `recipient` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#recipient). */\n    recipient: Recipient;\n    /** `amount` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#amount). */\n    amount?: Amount;\n    /** `spl-token` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#spl-token). */\n    splToken?: SPLToken;\n    /** `reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference). */\n    reference?: References;\n    /** `label` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#label). */\n    label?: Label;\n    /** `message` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#message).  */\n    message?: Message;\n    /** `memo` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#memo). */\n    memo?: Memo;\n}\n\n/**\n * Encode a Solana Pay URL.\n *\n * @param fields Fields to encode in the URL.\n */\nexport function encodeURL(fields: TransactionRequestURLFields | TransferRequestURLFields): URL {\n    return 'link' in fields ? encodeTransactionRequestURL(fields) : encodeTransferRequestURL(fields);\n}\n\nfunction encodeTransactionRequestURL({ link, label, message }: TransactionRequestURLFields): URL {\n    // Remove trailing slashes\n    const pathname = link.search\n        ? encodeURIComponent(String(link).replace(/\\/\\?/, '?'))\n        : String(link).replace(/\\/$/, '');\n    const url = new URL(SOLANA_PROTOCOL + pathname);\n\n    if (label) {\n        url.searchParams.append('label', label);\n    }\n\n    if (message) {\n        url.searchParams.append('message', message);\n    }\n\n    return url;\n}\n\nfunction encodeTransferRequestURL({\n    recipient,\n    amount,\n    splToken,\n    reference,\n    label,\n    message,\n    memo,\n}: TransferRequestURLFields): URL {\n    const pathname = recipient.toBase58();\n    const url = new URL(SOLANA_PROTOCOL + pathname);\n\n    if (amount) {\n        url.searchParams.append('amount', amount.toFixed(amount.decimalPlaces() ?? 0));\n    }\n\n    if (splToken) {\n        url.searchParams.append('spl-token', splToken.toBase58());\n    }\n\n    if (reference) {\n        if (!Array.isArray(reference)) {\n            reference = [reference];\n        }\n\n        for (const pubkey of reference) {\n            url.searchParams.append('reference', pubkey.toBase58());\n        }\n    }\n\n    if (label) {\n        url.searchParams.append('label', label);\n    }\n\n    if (message) {\n        url.searchParams.append('message', message);\n    }\n\n    if (memo) {\n        url.searchParams.append('memo', memo);\n    }\n\n    return url;\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,gBAAgB;AAmChD;;;;;AAKA,OAAM,SAAUC,SAASA,CAACC,MAA8D;EACpF,OAAO,MAAM,IAAIA,MAAM,GAAGC,2BAA2B,CAACD,MAAM,CAAC,GAAGE,wBAAwB,CAACF,MAAM,CAAC;AACpG;AAEA,SAASC,2BAA2BA,CAAC;EAAEE,IAAI;EAAEC,KAAK;EAAEC;AAAO,CAA+B;EACtF;EACA,MAAMC,QAAQ,GAAGH,IAAI,CAACI,MAAM,GACtBC,kBAAkB,CAACC,MAAM,CAACN,IAAI,CAAC,CAACO,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GACrDD,MAAM,CAACN,IAAI,CAAC,CAACO,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EACrC,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACd,eAAe,GAAGQ,QAAQ,CAAC;EAE/C,IAAIF,KAAK,EAAE;IACPO,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,OAAO,EAAEV,KAAK,CAAC;;EAG3C,IAAIC,OAAO,EAAE;IACTM,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,SAAS,EAAET,OAAO,CAAC;;EAG/C,OAAOM,GAAG;AACd;AAEA,SAAST,wBAAwBA,CAAC;EAC9Ba,SAAS;EACTC,MAAM;EACNC,QAAQ;EACRC,SAAS;EACTd,KAAK;EACLC,OAAO;EACPc;AAAI,CACmB;EACvB,MAAMb,QAAQ,GAAGS,SAAS,CAACK,QAAQ,EAAE;EACrC,MAAMT,GAAG,GAAG,IAAIC,GAAG,CAACd,eAAe,GAAGQ,QAAQ,CAAC;EAE/C,IAAIU,MAAM,EAAE;IACRL,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,QAAQ,EAAEE,MAAM,CAACK,OAAO,CAACL,MAAM,CAACM,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC;;EAGlF,IAAIL,QAAQ,EAAE;IACVN,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,WAAW,EAAEG,QAAQ,CAACG,QAAQ,EAAE,CAAC;;EAG7D,IAAIF,SAAS,EAAE;IACX,IAAI,CAACK,KAAK,CAACC,OAAO,CAACN,SAAS,CAAC,EAAE;MAC3BA,SAAS,GAAG,CAACA,SAAS,CAAC;;IAG3B,KAAK,MAAMO,MAAM,IAAIP,SAAS,EAAE;MAC5BP,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,WAAW,EAAEW,MAAM,CAACL,QAAQ,EAAE,CAAC;;;EAI/D,IAAIhB,KAAK,EAAE;IACPO,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,OAAO,EAAEV,KAAK,CAAC;;EAG3C,IAAIC,OAAO,EAAE;IACTM,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,SAAS,EAAET,OAAO,CAAC;;EAG/C,IAAIc,IAAI,EAAE;IACNR,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,MAAM,EAAEK,IAAI,CAAC;;EAGzC,OAAOR,GAAG;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}