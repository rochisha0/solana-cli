{"ast":null,"code":"var _jsxFileName = \"/home/rochisha/solana-pay/src/POS.js\",\n  _s = $RefreshSig$();\n// src/POS.js\nimport React, { useState } from 'react';\nimport { Connection, clusterApiUrl, PublicKey } from '@solana/web3.js';\nimport { createQR, encodeURL, findReference, validateTransfer } from '@solana/pay';\nimport BigNumber from 'bignumber.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst POS = () => {\n  _s();\n  const [cart, setCart] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [transactionConfirmed, setTransactionConfirmed] = useState(false);\n  const merchantPublicKey = new PublicKey('Your_Merchant_Public_Key');\n\n  // Function to add items to the cart\n  const addItemToCart = item => {\n    setCart([...cart, item]);\n    setTotal(total + item.price);\n  };\n\n  // Function to handle payment processing\n  const handlePayment = async () => {\n    try {\n      const connection = new Connection(clusterApiUrl('devnet')); // Use 'mainnet-beta' for production\n      const amount = new BigNumber(total);\n      const reference = new PublicKey('Reference_Public_Key'); // Unique reference for this transaction\n\n      // Create the Solana Pay payment URL\n      const paymentURL = encodeURL({\n        recipient: merchantPublicKey,\n        amount,\n        reference,\n        label: 'Your Store',\n        message: 'Thank you for your purchase!'\n      });\n\n      // Generate the QR code for the payment URL\n      const qr = createQR(paymentURL, 512, 'transparent');\n      document.getElementById('qr-container').innerHTML = ''; // Clear any existing QR code\n      document.getElementById('qr-container').appendChild(qr);\n\n      // Wait for the customer to complete the payment by scanning the QR code\n      const signatureInfo = await new Promise((resolve, reject) => {\n        const interval = setInterval(async () => {\n          try {\n            const signature = await findReference(connection, reference, {\n              finality: 'confirmed'\n            });\n            if (signature) {\n              clearInterval(interval);\n              resolve(signature);\n            }\n          } catch (e) {\n            // Payment not found, keep checking\n          }\n        }, 1000); // Check every second\n      });\n\n      // Validate the transaction to ensure it matches the payment request\n      const isValid = await validateTransfer(connection, signatureInfo.signature, {\n        recipient: merchantPublicKey,\n        amount,\n        reference\n      });\n      if (isValid) {\n        setTransactionConfirmed(true);\n        alert('Payment successful!');\n      } else {\n        throw new Error('Transaction validation failed');\n      }\n    } catch (error) {\n      console.error('Payment failed:', error);\n      alert('Payment failed. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"POS System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: cart.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [item.name, \" - $\", item.price]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total: $\", total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"qr-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePayment,\n      children: \"Pay Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), transactionConfirmed && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Payment Confirmed! Thank you for your purchase.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(POS, \"LCSPgk/oJQaRe1tZ0DCKTuwVmNU=\");\n_c = POS;\nexport default POS;\nvar _c;\n$RefreshReg$(_c, \"POS\");","map":{"version":3,"names":["React","useState","Connection","clusterApiUrl","PublicKey","createQR","encodeURL","findReference","validateTransfer","BigNumber","jsxDEV","_jsxDEV","POS","_s","cart","setCart","total","setTotal","transactionConfirmed","setTransactionConfirmed","merchantPublicKey","addItemToCart","item","price","handlePayment","connection","amount","reference","paymentURL","recipient","label","message","qr","document","getElementById","innerHTML","appendChild","signatureInfo","Promise","resolve","reject","interval","setInterval","signature","finality","clearInterval","e","isValid","alert","Error","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","name","id","onClick","_c","$RefreshReg$"],"sources":["/home/rochisha/solana-pay/src/POS.js"],"sourcesContent":["// src/POS.js\nimport React, { useState } from 'react';\nimport { Connection, clusterApiUrl, PublicKey } from '@solana/web3.js';\nimport { createQR, encodeURL, findReference, validateTransfer } from '@solana/pay';\nimport BigNumber from 'bignumber.js';\n\nconst POS = () => {\n    const [cart, setCart] = useState([]);\n    const [total, setTotal] = useState(0);\n    const [transactionConfirmed, setTransactionConfirmed] = useState(false);\n    const merchantPublicKey = new PublicKey('Your_Merchant_Public_Key');\n\n    // Function to add items to the cart\n    const addItemToCart = (item) => {\n        setCart([...cart, item]);\n        setTotal(total + item.price);\n    };\n\n    // Function to handle payment processing\n    const handlePayment = async () => {\n        try {\n            const connection = new Connection(clusterApiUrl('devnet')); // Use 'mainnet-beta' for production\n            const amount = new BigNumber(total);\n            const reference = new PublicKey('Reference_Public_Key'); // Unique reference for this transaction\n\n            // Create the Solana Pay payment URL\n            const paymentURL = encodeURL({\n                recipient: merchantPublicKey,\n                amount,\n                reference,\n                label: 'Your Store',\n                message: 'Thank you for your purchase!',\n            });\n\n            // Generate the QR code for the payment URL\n            const qr = createQR(paymentURL, 512, 'transparent');\n            document.getElementById('qr-container').innerHTML = ''; // Clear any existing QR code\n            document.getElementById('qr-container').appendChild(qr);\n\n            // Wait for the customer to complete the payment by scanning the QR code\n            const signatureInfo = await new Promise((resolve, reject) => {\n                const interval = setInterval(async () => {\n                    try {\n                        const signature = await findReference(connection, reference, { finality: 'confirmed' });\n                        if (signature) {\n                            clearInterval(interval);\n                            resolve(signature);\n                        }\n                    } catch (e) {\n                        // Payment not found, keep checking\n                    }\n                }, 1000); // Check every second\n            });\n\n            // Validate the transaction to ensure it matches the payment request\n            const isValid = await validateTransfer(connection, signatureInfo.signature, {\n                recipient: merchantPublicKey,\n                amount,\n                reference,\n            });\n\n            if (isValid) {\n                setTransactionConfirmed(true);\n                alert('Payment successful!');\n            } else {\n                throw new Error('Transaction validation failed');\n            }\n        } catch (error) {\n            console.error('Payment failed:', error);\n            alert('Payment failed. Please try again.');\n        }\n    };\n\n    return (\n        <div>\n            <h1>POS System</h1>\n            <div className=\"cart\">\n                <h2>Cart</h2>\n                <ul>\n                    {cart.map((item, index) => (\n                        <li key={index}>{item.name} - ${item.price}</li>\n                    ))}\n                </ul>\n                <h3>Total: ${total}</h3>\n            </div>\n            <div id=\"qr-container\"></div>\n            <button onClick={handlePayment}>Pay Now</button>\n            {transactionConfirmed && <p>Payment Confirmed! Thank you for your purchase.</p>}\n        </div>\n    );\n};\n\nexport default POS;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}