{"ast":null,"code":"/**\n * Thrown when no transaction signature can be found referencing a given public key.\n */\nexport class FindReferenceError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'FindReferenceError';\n  }\n}\n/**\n * Find the oldest transaction signature referencing a given public key.\n *\n * @param connection - A connection to the cluster.\n * @param reference - `reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference).\n * @param options - Options for `getSignaturesForAddress`.\n *\n * @throws {FindReferenceError}\n */\nexport async function findReference(connection, reference, {\n  finality,\n  ...options\n} = {}) {\n  const signatures = await connection.getSignaturesForAddress(reference, options, finality);\n  const length = signatures.length;\n  if (!length) throw new FindReferenceError('not found');\n  // If one or more transaction signatures are found under the limit, return the oldest one.\n  const oldest = signatures[length - 1];\n  if (length < (options?.limit || 1000)) return oldest;\n  try {\n    // In the unlikely event that signatures up to the limit are found, recursively find the oldest one.\n    return await findReference(connection, reference, {\n      finality,\n      ...options,\n      before: oldest.signature\n    });\n  } catch (error) {\n    // If the signatures found were exactly at the limit, there won't be more to find, so return the oldest one.\n    if (error instanceof FindReferenceError) return oldest;\n    throw error;\n  }\n}","map":{"version":3,"names":["FindReferenceError","Error","constructor","name","findReference","connection","reference","finality","options","signatures","getSignaturesForAddress","length","oldest","limit","before","signature","error"],"sources":["/home/rochisha/solana-pay/node_modules/@solana/pay/src/findReference.ts"],"sourcesContent":["import type { ConfirmedSignatureInfo, Connection, Finality, SignaturesForAddressOptions } from '@solana/web3.js';\nimport type { Reference } from './types.js';\n\n/**\n * Thrown when no transaction signature can be found referencing a given public key.\n */\nexport class FindReferenceError extends Error {\n    name = 'FindReferenceError';\n}\n\n/**\n * Find the oldest transaction signature referencing a given public key.\n *\n * @param connection - A connection to the cluster.\n * @param reference - `reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference).\n * @param options - Options for `getSignaturesForAddress`.\n *\n * @throws {FindReferenceError}\n */\nexport async function findReference(\n    connection: Connection,\n    reference: Reference,\n    { finality, ...options }: SignaturesForAddressOptions & { finality?: Finality } = {}\n): Promise<ConfirmedSignatureInfo> {\n    const signatures = await connection.getSignaturesForAddress(reference, options, finality);\n\n    const length = signatures.length;\n    if (!length) throw new FindReferenceError('not found');\n\n    // If one or more transaction signatures are found under the limit, return the oldest one.\n    const oldest = signatures[length - 1];\n    if (length < (options?.limit || 1000)) return oldest;\n\n    try {\n        // In the unlikely event that signatures up to the limit are found, recursively find the oldest one.\n        return await findReference(connection, reference, { finality, ...options, before: oldest.signature });\n    } catch (error: any) {\n        // If the signatures found were exactly at the limit, there won't be more to find, so return the oldest one.\n        if (error instanceof FindReferenceError) return oldest;\n        throw error;\n    }\n}\n"],"mappings":"AAGA;;;AAGA,OAAM,MAAOA,kBAAmB,SAAQC,KAAK;EAA7CC,YAAA;;IACI,KAAAC,IAAI,GAAG,oBAAoB;EAC/B;;AAEA;;;;;;;;;AASA,OAAO,eAAeC,aAAaA,CAC/BC,UAAsB,EACtBC,SAAoB,EACpB;EAAEC,QAAQ;EAAE,GAAGC;AAAO,IAA4D,EAAE;EAEpF,MAAMC,UAAU,GAAG,MAAMJ,UAAU,CAACK,uBAAuB,CAACJ,SAAS,EAAEE,OAAO,EAAED,QAAQ,CAAC;EAEzF,MAAMI,MAAM,GAAGF,UAAU,CAACE,MAAM;EAChC,IAAI,CAACA,MAAM,EAAE,MAAM,IAAIX,kBAAkB,CAAC,WAAW,CAAC;EAEtD;EACA,MAAMY,MAAM,GAAGH,UAAU,CAACE,MAAM,GAAG,CAAC,CAAC;EACrC,IAAIA,MAAM,IAAIH,OAAO,EAAEK,KAAK,IAAI,IAAI,CAAC,EAAE,OAAOD,MAAM;EAEpD,IAAI;IACA;IACA,OAAO,MAAMR,aAAa,CAACC,UAAU,EAAEC,SAAS,EAAE;MAAEC,QAAQ;MAAE,GAAGC,OAAO;MAAEM,MAAM,EAAEF,MAAM,CAACG;IAAS,CAAE,CAAC;GACxG,CAAC,OAAOC,KAAU,EAAE;IACjB;IACA,IAAIA,KAAK,YAAYhB,kBAAkB,EAAE,OAAOY,MAAM;IACtD,MAAMI,KAAK;;AAEnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}