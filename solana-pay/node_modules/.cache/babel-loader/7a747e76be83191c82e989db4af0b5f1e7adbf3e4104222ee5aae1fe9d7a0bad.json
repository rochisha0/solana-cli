{"ast":null,"code":"/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { validateBasic, wNAF } from './curve.js';\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, memoized, abool } from './utils.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = {\n  zip215: true\n};\nfunction validateOpts(curve) {\n  const opts = validateBasic(curve);\n  ut.validateObject(curve, {\n    hash: 'function',\n    a: 'bigint',\n    d: 'bigint',\n    randomBytes: 'function'\n  }, {\n    adjustScalarBytes: 'function',\n    domain: 'function',\n    uvRatio: 'function',\n    mapToCurve: 'function'\n  });\n  // Set defaults\n  return Object.freeze({\n    ...opts\n  });\n}\n/**\n * Creates Twisted Edwards curve with EdDSA signatures.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h\n * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })\n */\nexport function twistedEdwards(curveDef) {\n  const CURVE = validateOpts(curveDef);\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor\n  } = CURVE;\n  const MASK = _2n << BigInt(nByteLength * 8) - _1n;\n  const modP = Fp.create; // Function overrides\n  // sqrt(u/v)\n  const uvRatio = CURVE.uvRatio || ((u, v) => {\n    try {\n      return {\n        isValid: true,\n        value: Fp.sqrt(u * Fp.inv(v))\n      };\n    } catch (e) {\n      return {\n        isValid: false,\n        value: _0n\n      };\n    }\n  });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || (bytes => bytes); // NOOP\n  const domain = CURVE.domain || ((data, ctx, phflag) => {\n    abool('phflag', phflag);\n    if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n    return data;\n  }); // NOOP\n  // 0 <= n < MASK\n  // Coordinates larger than Fp.ORDER are allowed for zip215\n  function aCoordinate(title, n) {\n    ut.aInRange('coordinate ' + title, n, _0n, MASK);\n  }\n  function assertPoint(other) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p, iz) => {\n    const {\n      ex: x,\n      ey: y,\n      ez: z\n    } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n    const ax = modP(x * iz);\n    const ay = modP(y * iz);\n    const zz = modP(z * iz);\n    if (is0) return {\n      x: _0n,\n      y: _1n\n    };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return {\n      x: ax,\n      y: ay\n    };\n  });\n  const assertValidMemo = memoized(p => {\n    const {\n      a,\n      d\n    } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const {\n      ex: X,\n      ey: Y,\n      ez: Z,\n      et: T\n    } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point {\n    constructor(ex, ey, ez, et) {\n      this.ex = ex;\n      this.ey = ey;\n      this.ez = ez;\n      this.et = et;\n      aCoordinate('x', ex);\n      aCoordinate('y', ey);\n      aCoordinate('z', ez);\n      aCoordinate('t', et);\n      Object.freeze(this);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    static fromAffine(p) {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const {\n        x,\n        y\n      } = p || {};\n      aCoordinate('x', x);\n      aCoordinate('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points) {\n      const toInv = Fp.invertBatch(points.map(p => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity() {\n      assertValidMemo(this);\n    }\n    // Compare one point to another.\n    equals(other) {\n      assertPoint(other);\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1\n      } = this;\n      const {\n        ex: X2,\n        ey: Y2,\n        ez: Z2\n      } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    negate() {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double() {\n      const {\n        a\n      } = CURVE;\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1\n      } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other) {\n      assertPoint(other);\n      const {\n        a,\n        d\n      } = CURVE;\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1,\n        et: T1\n      } = this;\n      const {\n        ex: X2,\n        ey: Y2,\n        ez: Z2,\n        et: T2\n      } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    wNAF(n) {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n    // Constant-time multiplication.\n    multiply(scalar) {\n      const n = scalar;\n      ut.aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const {\n        p,\n        f\n      } = this.wNAF(n);\n      return Point.normalizeZ([p, f])[0];\n    }\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar) {\n      const n = scalar;\n      ut.aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder() {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree() {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz) {\n      return toAffineMemo(this, iz);\n    }\n    clearCofactor() {\n      const {\n        h: cofactor\n      } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex, zip215 = false) {\n      const {\n        d,\n        a\n      } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      abool('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      ut.aInRange('pointHex.y', y, _0n, max);\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let {\n        isValid,\n        value: x\n      } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({\n        x,\n        y\n      });\n    }\n    static fromPrivateKey(privKey) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes() {\n      const {\n        x,\n        y\n      } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex() {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n  Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n  const {\n    BASE: G,\n    ZERO: I\n  } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n  function modN(a) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash) {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return {\n      head,\n      prefix,\n      scalar,\n      point,\n      pointBytes\n    };\n  }\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey) {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg, privKey, options = {}) {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const {\n      prefix,\n      scalar,\n      pointBytes\n    } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    ut.aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n  const verifyOpts = VERIFY_DEFAULT;\n  function verify(sig, msg, publicKey, options = verifyOpts) {\n    const {\n      context,\n      zip215\n    } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (zip215 !== undefined) abool('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: () => randomBytes(Fp.BYTES),\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE) {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    }\n  };\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils\n  };\n}","map":{"version":3,"names":["validateBasic","wNAF","mod","ut","ensureBytes","memoized","abool","_0n","BigInt","_1n","_2n","_8n","VERIFY_DEFAULT","zip215","validateOpts","curve","opts","validateObject","hash","a","d","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","Object","freeze","twistedEdwards","curveDef","CURVE","Fp","n","CURVE_ORDER","prehash","cHash","nByteLength","h","cofactor","MASK","modP","create","u","v","isValid","value","sqrt","inv","e","bytes","data","ctx","phflag","length","Error","aCoordinate","title","aInRange","assertPoint","other","Point","toAffineMemo","p","iz","ex","x","ey","y","ez","z","is0","ax","ay","zz","assertValidMemo","X","Y","Z","et","T","X2","Y2","Z2","Z4","aX2","left","right","XY","ZT","constructor","toAffine","fromAffine","normalizeZ","points","toInv","invertBatch","map","i","_setWindowSize","windowSize","wnaf","setWindowSize","assertValidity","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","ZERO","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","add","T1","T2","subtract","wNAFCached","multiply","scalar","f","multiplyUnsafe","I","unsafeLadder","isSmallOrder","isTorsionFree","clearCofactor","fromHex","hex","len","BYTES","normed","slice","lastByte","bytesToNumberLE","max","ORDER","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","numberToBytesLE","toHex","bytesToHex","BASE","Gx","Gy","modN","modN_LE","key","hashed","head","prefix","pointBytes","getPublicKey","hashDomainToScalar","context","Uint8Array","msgs","msg","concatBytes","sign","options","r","R","k","s","res","verifyOpts","verify","sig","publicKey","undefined","SB","error","RkA","utils","randomPrivateKey","precompute","ExtendedPoint"],"sources":["/home/rochisha/solana-pay/node_modules/@noble/curves/src/abstract/edwards.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { AffinePoint, BasicCurve, Group, GroupConstructor, validateBasic, wNAF } from './curve.js';\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex, memoized, abool } from './utils.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\n/**\n * Edwards Curve interface.\n * Main methods: `getPublicKey(priv)`, `sign(msg, priv)`, `verify(sig, msg, pub)`.\n */\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n/**\n * Creates Twisted Edwards curve with EdDSA signatures.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h\n * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })\n */\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      abool('phflag', phflag);\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  // 0 <= n < MASK\n  // Coordinates larger than Fp.ORDER are allowed for zip215\n  function aCoordinate(title: string, n: bigint) {\n    ut.aInRange('coordinate ' + title, n, _0n, MASK);\n  }\n\n  function assertPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p: Point, iz?: bigint): AffinePoint<bigint> => {\n    const { ex: x, ey: y, ez: z } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n    const ax = modP(x * iz);\n    const ay = modP(y * iz);\n    const zz = modP(z * iz);\n    if (is0) return { x: _0n, y: _1n };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  const assertValidMemo = memoized((p: Point) => {\n    const { a, d } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const { ex: X, ey: Y, ez: Z, et: T } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      aCoordinate('x', ex);\n      aCoordinate('y', ey);\n      aCoordinate('z', ez);\n      aCoordinate('t', et);\n      Object.freeze(this);\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      aCoordinate('x', x);\n      aCoordinate('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      assertPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      assertPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const n = scalar;\n      ut.aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const { p, f } = this.wNAF(n);\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      const n = scalar;\n      ut.aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      return toAffineMemo(this, iz);\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      abool('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      ut.aInRange('pointHex.y', y, _0n, max);\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    ut.aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (zip215 !== undefined) abool('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}