{"ast":null,"code":"import { getBooleanEncoder, getBytesEncoder, getDataEnumCodec, getOptionEncoder, getStringEncoder, getStructEncoder, getTupleEncoder, getU64Encoder, mapEncoder } from '@solana/codecs';\nimport { splDiscriminate } from '@solana/spl-type-length-value';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { getFieldCodec, getFieldConfig } from './field.js';\nfunction getInstructionEncoder(discriminator, dataEncoder) {\n  return mapEncoder(getTupleEncoder([getBytesEncoder(), dataEncoder]), data => [discriminator, data]);\n}\nfunction getPublicKeyEncoder() {\n  return mapEncoder(getBytesEncoder({\n    size: 32\n  }), publicKey => publicKey.toBytes());\n}\nexport function createInitializeInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    mint,\n    mintAuthority,\n    name,\n    symbol,\n    uri\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: false,\n      isWritable: false,\n      pubkey: updateAuthority\n    }, {\n      isSigner: false,\n      isWritable: false,\n      pubkey: mint\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: mintAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(splDiscriminate('spl_token_metadata_interface:initialize_account'), getStructEncoder([['name', getStringEncoder()], ['symbol', getStringEncoder()], ['uri', getStringEncoder()]])).encode({\n      name,\n      symbol,\n      uri\n    }))\n  });\n}\nexport function createUpdateFieldInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    field,\n    value\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: updateAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(splDiscriminate('spl_token_metadata_interface:updating_field'), getStructEncoder([['field', getDataEnumCodec(getFieldCodec())], ['value', getStringEncoder()]])).encode({\n      field: getFieldConfig(field),\n      value\n    }))\n  });\n}\nexport function createRemoveKeyInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    key,\n    idempotent\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: updateAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(splDiscriminate('spl_token_metadata_interface:remove_key_ix'), getStructEncoder([['idempotent', getBooleanEncoder()], ['key', getStringEncoder()]])).encode({\n      idempotent,\n      key\n    }))\n  });\n}\nexport function createUpdateAuthorityInstruction(args) {\n  const {\n    programId,\n    metadata,\n    oldAuthority,\n    newAuthority\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: oldAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(splDiscriminate('spl_token_metadata_interface:update_the_authority'), getStructEncoder([['newAuthority', getPublicKeyEncoder()]])).encode({\n      newAuthority: newAuthority ?? SystemProgram.programId\n    }))\n  });\n}\nexport function createEmitInstruction(args) {\n  const {\n    programId,\n    metadata,\n    start,\n    end\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: false,\n      pubkey: metadata\n    }],\n    data: Buffer.from(getInstructionEncoder(splDiscriminate('spl_token_metadata_interface:emitter'), getStructEncoder([['start', getOptionEncoder(getU64Encoder())], ['end', getOptionEncoder(getU64Encoder())]])).encode({\n      start: start ?? null,\n      end: end ?? null\n    }))\n  });\n}","map":{"version":3,"names":["getBooleanEncoder","getBytesEncoder","getDataEnumCodec","getOptionEncoder","getStringEncoder","getStructEncoder","getTupleEncoder","getU64Encoder","mapEncoder","splDiscriminate","SystemProgram","TransactionInstruction","getFieldCodec","getFieldConfig","getInstructionEncoder","discriminator","dataEncoder","data","getPublicKeyEncoder","size","publicKey","toBytes","createInitializeInstruction","args","programId","metadata","updateAuthority","mint","mintAuthority","name","symbol","uri","keys","isSigner","isWritable","pubkey","Buffer","from","encode","createUpdateFieldInstruction","field","value","createRemoveKeyInstruction","key","idempotent","createUpdateAuthorityInstruction","oldAuthority","newAuthority","createEmitInstruction","start","end"],"sources":["/home/rochisha/solana-token-ui/node_modules/@solana/spl-token-metadata/src/instruction.ts"],"sourcesContent":["import type { Encoder } from '@solana/codecs';\nimport {\n    getBooleanEncoder,\n    getBytesEncoder,\n    getDataEnumCodec,\n    getOptionEncoder,\n    getStringEncoder,\n    getStructEncoder,\n    getTupleEncoder,\n    getU64Encoder,\n    mapEncoder,\n} from '@solana/codecs';\nimport { splDiscriminate } from '@solana/spl-type-length-value';\nimport type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\n\nimport type { Field } from './field.js';\nimport { getFieldCodec, getFieldConfig } from './field.js';\n\nfunction getInstructionEncoder<T extends object>(discriminator: Uint8Array, dataEncoder: Encoder<T>): Encoder<T> {\n    return mapEncoder(getTupleEncoder([getBytesEncoder(), dataEncoder]), (data: T): [Uint8Array, T] => [\n        discriminator,\n        data,\n    ]);\n}\n\nfunction getPublicKeyEncoder(): Encoder<PublicKey> {\n    return mapEncoder(getBytesEncoder({ size: 32 }), (publicKey: PublicKey) => publicKey.toBytes());\n}\n\n/**\n * Initializes a TLV entry with the basic token-metadata fields.\n *\n * Assumes that the provided mint is an SPL token mint, that the metadata\n * account is allocated and assigned to the program, and that the metadata\n * account has enough lamports to cover the rent-exempt reserve.\n */\nexport interface InitializeInstructionArgs {\n    programId: PublicKey;\n    metadata: PublicKey;\n    updateAuthority: PublicKey;\n    mint: PublicKey;\n    mintAuthority: PublicKey;\n    name: string;\n    symbol: string;\n    uri: string;\n}\n\nexport function createInitializeInstruction(args: InitializeInstructionArgs): TransactionInstruction {\n    const { programId, metadata, updateAuthority, mint, mintAuthority, name, symbol, uri } = args;\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: metadata },\n            { isSigner: false, isWritable: false, pubkey: updateAuthority },\n            { isSigner: false, isWritable: false, pubkey: mint },\n            { isSigner: true, isWritable: false, pubkey: mintAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_metadata_interface:initialize_account'),\n                getStructEncoder([\n                    ['name', getStringEncoder()],\n                    ['symbol', getStringEncoder()],\n                    ['uri', getStringEncoder()],\n                ])\n            ).encode({ name, symbol, uri })\n        ),\n    });\n}\n\n/**\n * If the field does not exist on the account, it will be created.\n * If the field does exist, it will be overwritten.\n */\nexport interface UpdateFieldInstruction {\n    programId: PublicKey;\n    metadata: PublicKey;\n    updateAuthority: PublicKey;\n    field: Field | string;\n    value: string;\n}\n\nexport function createUpdateFieldInstruction(args: UpdateFieldInstruction): TransactionInstruction {\n    const { programId, metadata, updateAuthority, field, value } = args;\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: metadata },\n            { isSigner: true, isWritable: false, pubkey: updateAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_metadata_interface:updating_field'),\n                getStructEncoder([\n                    ['field', getDataEnumCodec(getFieldCodec())],\n                    ['value', getStringEncoder()],\n                ])\n            ).encode({ field: getFieldConfig(field), value })\n        ),\n    });\n}\n\nexport interface RemoveKeyInstructionArgs {\n    programId: PublicKey;\n    metadata: PublicKey;\n    updateAuthority: PublicKey;\n    key: string;\n    idempotent: boolean;\n}\n\nexport function createRemoveKeyInstruction(args: RemoveKeyInstructionArgs) {\n    const { programId, metadata, updateAuthority, key, idempotent } = args;\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: metadata },\n            { isSigner: true, isWritable: false, pubkey: updateAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_metadata_interface:remove_key_ix'),\n                getStructEncoder([\n                    ['idempotent', getBooleanEncoder()],\n                    ['key', getStringEncoder()],\n                ])\n            ).encode({ idempotent, key })\n        ),\n    });\n}\n\nexport interface UpdateAuthorityInstructionArgs {\n    programId: PublicKey;\n    metadata: PublicKey;\n    oldAuthority: PublicKey;\n    newAuthority: PublicKey | null;\n}\n\nexport function createUpdateAuthorityInstruction(args: UpdateAuthorityInstructionArgs): TransactionInstruction {\n    const { programId, metadata, oldAuthority, newAuthority } = args;\n\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: metadata },\n            { isSigner: true, isWritable: false, pubkey: oldAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_metadata_interface:update_the_authority'),\n                getStructEncoder([['newAuthority', getPublicKeyEncoder()]])\n            ).encode({ newAuthority: newAuthority ?? SystemProgram.programId })\n        ),\n    });\n}\n\nexport interface EmitInstructionArgs {\n    programId: PublicKey;\n    metadata: PublicKey;\n    start?: bigint;\n    end?: bigint;\n}\n\nexport function createEmitInstruction(args: EmitInstructionArgs): TransactionInstruction {\n    const { programId, metadata, start, end } = args;\n    return new TransactionInstruction({\n        programId,\n        keys: [{ isSigner: false, isWritable: false, pubkey: metadata }],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_metadata_interface:emitter'),\n                getStructEncoder([\n                    ['start', getOptionEncoder(getU64Encoder())],\n                    ['end', getOptionEncoder(getU64Encoder())],\n                ])\n            ).encode({ start: start ?? null, end: end ?? null })\n        ),\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}