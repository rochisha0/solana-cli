{"ast":null,"code":"var _jsxFileName = \"/home/rochisha/solana-token-ui/src/components/TransferToken.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransferToken = () => {\n  _s();\n  const [mintAddress, setMintAddress] = useState('');\n  const [destination, setDestination] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [message, setMessage] = useState('');\n  const transferToken = async () => {\n    const connection = new Connection(process.env.REACT_APP_SOLANA_NETWORK);\n    const payer = Keypair.generate();\n    const mint = new PublicKey(mintAddress);\n    const token = new Token(connection, mint, TOKEN_PROGRAM_ID, payer);\n    const sourceTokenAccount = await token.getOrCreateAssociatedAccountInfo(payer.publicKey);\n    const destinationTokenAccount = await token.getOrCreateAssociatedAccountInfo(new PublicKey(destination));\n    await token.transfer(sourceTokenAccount.address, destinationTokenAccount.address, payer, [], amount);\n    setMessage(`Transferred ${amount} tokens to ${destinationTokenAccount.address.toBase58()}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transfer Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Mint Address\",\n      value: mintAddress,\n      onChange: e => setMintAddress(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Destination Address\",\n      value: destination,\n      onChange: e => setDestination(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Amount\",\n      value: amount,\n      onChange: e => setAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: transferToken,\n      children: \"Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(TransferToken, \"CH7WnjStWbPK9ZTHhqKzC3P22Zg=\");\n_c = TransferToken;\nexport default TransferToken;\nvar _c;\n$RefreshReg$(_c, \"TransferToken\");","map":{"version":3,"names":["React","useState","Connection","Keypair","PublicKey","Token","TOKEN_PROGRAM_ID","jsxDEV","_jsxDEV","TransferToken","_s","mintAddress","setMintAddress","destination","setDestination","amount","setAmount","message","setMessage","transferToken","connection","process","env","REACT_APP_SOLANA_NETWORK","payer","generate","mint","token","sourceTokenAccount","getOrCreateAssociatedAccountInfo","publicKey","destinationTokenAccount","transfer","address","toBase58","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/home/rochisha/solana-token-ui/src/components/TransferToken.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nconst TransferToken = () => {\n  const [mintAddress, setMintAddress] = useState('');\n  const [destination, setDestination] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [message, setMessage] = useState('');\n\n  const transferToken = async () => {\n    const connection = new Connection(process.env.REACT_APP_SOLANA_NETWORK);\n    const payer = Keypair.generate();\n    const mint = new PublicKey(mintAddress);\n    const token = new Token(connection, mint, TOKEN_PROGRAM_ID, payer);\n    const sourceTokenAccount = await token.getOrCreateAssociatedAccountInfo(payer.publicKey);\n    const destinationTokenAccount = await token.getOrCreateAssociatedAccountInfo(new PublicKey(destination));\n    await token.transfer(sourceTokenAccount.address, destinationTokenAccount.address, payer, [], amount);\n    setMessage(`Transferred ${amount} tokens to ${destinationTokenAccount.address.toBase58()}`);\n  };\n\n  return (\n    <div>\n      <h2>Transfer Token</h2>\n      <input \n        type=\"text\" \n        placeholder=\"Mint Address\" \n        value={mintAddress}\n        onChange={(e) => setMintAddress(e.target.value)} \n      />\n      <input \n        type=\"text\" \n        placeholder=\"Destination Address\" \n        value={destination}\n        onChange={(e) => setDestination(e.target.value)} \n      />\n      <input \n        type=\"number\" \n        placeholder=\"Amount\" \n        value={amount}\n        onChange={(e) => setAmount(e.target.value)} \n      />\n      <button onClick={transferToken}>Transfer</button>\n      {message && <p>{message}</p>}\n    </div>\n  );\n};\n\nexport default TransferToken;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}