{"ast":null,"code":"var _jsxFileName = \"/home/rochisha/solana-token-ui/src/components/BurnToken.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Connection, Keypair, PublicKey, Transaction, sendAndConfirmTransaction } from '@solana/web3.js';\nimport { createAssociatedTokenAccount, createBurnInstruction, getAccount, getAssociatedTokenAddress } from '@solana/spl-token';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BurnToken = () => {\n  _s();\n  const [mintAddress, setMintAddress] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [message, setMessage] = useState('');\n  const burnToken = async () => {\n    const connection = new Connection(process.env.REACT_APP_SOLANA_NETWORK);\n    const payer = Keypair.generate();\n    const mint = new PublicKey(mintAddress);\n    const tokenAccountAddress = await getAssociatedTokenAddress(mint, payer.publicKey);\n    try {\n      await getAccount(connection, tokenAccountAddress);\n    } catch (error) {\n      await createAssociatedTokenAccount(connection, payer, mint, payer.publicKey);\n    }\n    const transaction = new Transaction().add(createBurnInstruction(tokenAccountAddress, mint, payer.publicKey, amount));\n    await sendAndConfirmTransaction(connection, transaction, [payer]);\n    setMessage(`Burned ${amount} tokens from ${tokenAccountAddress.toBase58()}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Burn Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Mint Address\",\n      value: mintAddress,\n      onChange: e => setMintAddress(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Amount\",\n      value: amount,\n      onChange: e => setAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: burnToken,\n      children: \"Burn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(BurnToken, \"7Yj+vbeZeh+06RT0TL4pRXaHRYg=\");\n_c = BurnToken;\nexport default BurnToken;\nvar _c;\n$RefreshReg$(_c, \"BurnToken\");","map":{"version":3,"names":["React","useState","Connection","Keypair","PublicKey","Transaction","sendAndConfirmTransaction","createAssociatedTokenAccount","createBurnInstruction","getAccount","getAssociatedTokenAddress","jsxDEV","_jsxDEV","BurnToken","_s","mintAddress","setMintAddress","amount","setAmount","message","setMessage","burnToken","connection","process","env","REACT_APP_SOLANA_NETWORK","payer","generate","mint","tokenAccountAddress","publicKey","error","transaction","add","toBase58","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/home/rochisha/solana-token-ui/src/components/BurnToken.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Connection, Keypair, PublicKey, Transaction, sendAndConfirmTransaction } from '@solana/web3.js';\nimport { createAssociatedTokenAccount, createBurnInstruction, getAccount, getAssociatedTokenAddress } from '@solana/spl-token';\n\nconst BurnToken = () => {\n  const [mintAddress, setMintAddress] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [message, setMessage] = useState('');\n\n  const burnToken = async () => {\n    const connection = new Connection(process.env.REACT_APP_SOLANA_NETWORK);\n    const payer = Keypair.generate();\n    const mint = new PublicKey(mintAddress);\n\n    const tokenAccountAddress = await getAssociatedTokenAddress(mint, payer.publicKey);\n\n    try {\n      await getAccount(connection, tokenAccountAddress);\n    } catch (error) {\n      await createAssociatedTokenAccount(connection, payer, mint, payer.publicKey);\n    }\n\n    const transaction = new Transaction().add(\n      createBurnInstruction(\n        tokenAccountAddress,\n        mint,\n        payer.publicKey,\n        amount\n      )\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer]);\n\n    setMessage(`Burned ${amount} tokens from ${tokenAccountAddress.toBase58()}`);\n  };\n\n  return (\n    <div>\n      <h2>Burn Token</h2>\n      <input \n        type=\"text\" \n        placeholder=\"Mint Address\" \n        value={mintAddress}\n        onChange={(e) => setMintAddress(e.target.value)} \n      />\n      <input \n        type=\"number\" \n        placeholder=\"Amount\" \n        value={amount}\n        onChange={(e) => setAmount(e.target.value)} \n      />\n      <button onClick={burnToken}>Burn</button>\n      {message && <p>{message}</p>}\n    </div>\n  );\n};\n\nexport default BurnToken;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}